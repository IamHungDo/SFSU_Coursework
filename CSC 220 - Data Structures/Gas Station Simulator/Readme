CSc 220        Assignment 3. (Due November 23, 2014)       Instructor: James Wong
==================================================================================


1. Introduction 

We want to write a program to simulate the behavior of a self-serve gas station. 
The goal of this simulation is to collect statistical information of the gas 
station’s cars and gas pumps. A gas station consists of several pumps and a car 
waiting line (i.e. a car queue). In each time unit, at most one new car arrives 
at the gas station. If the car waiting line is too long, the car leaves without 
getting gas; otherwise, the car gets into the waiting line. If all pumps are busy, 
cars in the waiting lines must wait for a gas pump. If a pump is free and cars are 
waiting, the first car in the waiting line gets the pump and begins pumping gas 
immediately. When a car finishes using a pump, the car departs and the pump 
becomes free. We will run the simulation through many units of time. At the end of 
each time unit, your program should print out a "snap-shot" of queues, cars and 
pumps.  At the end of the program, your program should print out statistics and 
conclude simulation.


2. Assumptions and Requirements

2.1. Assumptions

- At most one car arrival per time unit
- All numbers are positive integer numbers (>=0), except average values 
  should be displayed to two decimal places
- No time lost in between events:
  a car arriving and entering waiting line 
  a car arriving and leaving without pumping gas
  a car completing service and departing
  a car leaving the waiting line, advancing to a pump and 
        beginning service

2.2. The limits of simulations parameters

- Maximum number of pumps 	10
- Maximum simulation length	10000
- Maximum service duration      500
- Maximum car queue limit 	50
- Probability of a new car     	1% - 100%


2.3. Input parameters and customer (random/file) data 

- The following data are read at the beginning of the simulation:

  int numGasPumps;	// number of gas pumps. 
  int simulationTime; 	// time to run simulation	
  int carQSizeLimit; 	// car queue size limit
  int chancesOfArrival;	// probability of a new car (1 - 100)
  int maxDuration;	// maximum service (or pumping gas) duration per car
  int dataSource;	// data source: from file or random

- Sample input layout :

  $ java PJ3.GasStationSimulation

        ***  Get Simulation Parameters  ***

  Enter simulation time (positive integer)  : 10
  Enter maximum service time of cars        : 5
  Enter chances (0% < & <= 100%) of new car : 75
  Enter the number of gas pumps             : 3
  Enter car queue size limit                : 2
  Enter 1/0 to get data from file/rand()    : 1        // see more details below
  Enter filename                            : DataFile // for input 1 above

- In each time unit of simulation, your program will need two positive integers 
  numbers to compute (i) boolean anyNewArrival & (ii) int serviceDuration. 
  A user should have two options (1 or 0) to specify the source of those numbers:

  For user input 1, numbers are read from a file. A filename should be provided 
  at the beginning of simulation. Each line in a datafile should contain two 
  positive numbers (> 0). A datafile should contain sufficient data for
  simulationTime upto 500 units, i.e. at least 500 lines. In each time unit, 
  anyNewArrival & serviceDuration are computed as follows :

         read data1 and data2 from the file;
         anyNewArrival = (((data1%100)+1)<= chancesOfArrival);
         serviceDuration= (data2%maxDuration)+1;
 

  For user input 0, numbers are generated by method nextInt() in a Random 
  object, dataRandom, which should be constructed at the beginning of 
  simulation. In each time unit, anyNewArrival & serviceDuration are computed as
  follows :

        anyNewArrival = ((dataRandom.nextInt(100)+1) <= chancesOfArrival);
        serviceDuration = dataRandom.nextInt(maxDuration)+1;


2.4. Output information

- At the end of each time unit, you program should print out information as 
  example below:

    Time : 7
	car #6 arrives with duration 5 units
	car #6 wait in the car queue
	car #4 is done
	pump  #2 is free
	car #3 is done
	pump  #3 is free
	car #6 gets a pump
	pump #2 starts serving car #6 for 5 units


- At the end of simulation, you need to print out information as the following 
  example :

   End of simulation report

	# total arrival cars  : 6
	# cars gone-away      : 0
	# cars served         : 6

	*** Current GasPumps Info. *** 


	# waiting cars        : 0
	# busy gas pumps      : 1
	# free gas pumps      : 2
	
	Total waiting time         : 0
	Average waiting time       : 0.00


	Busy GasPumps Info. :


		GasPump ID           : 2
		Total free time      : 2
		Total service time   : 8
		Total # of cars      : 3
		Average service time : 2.67



	Free GasPumps Info. :


		GasPump ID           : 3
		Total free time      : 5
		Total service time   : 5
		Total # of cars      : 1
		Average service time : 5.00


		GasPump ID           : 1
		Total free time      : 2
		Total service time   : 8
		Total # of cars      : 2
		Average service time : 4.00


2.5. Data structures and simulation algorithm 

  I have defined package PJ3 with the Car, GasPump and GasStation classes, 
  you need to implement their methods. I also provide an outline of a 
  simulation program GasStationSimulation.java. 


3. Compile and run program

- You need to download PJ3.zip file (with sample datafie) from ilearn.  

- Compile programs (you are in directory containing Readme file):

  javac PJ3/*.java

- Run programs (you are in directory containing Readme file):

  // Run simulation
  java PJ3.GasStationSimulation

4. Due Date 

- 11:59:59PM, Sunday, November 23, 2014
- To submit your project, you need to zip (or tar) all source files (*.java)
  and upload it to ilearn. 

